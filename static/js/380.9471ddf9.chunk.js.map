{"version":3,"file":"static/js/380.9471ddf9.chunk.js","mappings":"uKACA,MAA4B,6B,SCCb,SAASA,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,OAAO,gBAAKC,UAAWC,EAAhB,SAA8BF,M,qDCgBvC,IAjBkB,SAAC,GAAgB,IAAdG,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MACjB,OACE,+BACE,wBACGF,GACCA,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,cAAd,OACT,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAA1C,SACGI,GAASC,KAFLF,Y,iMCPRM,E,MAAWC,GAAAA,OAAa,CACnCC,IAAK,GACLC,QAAS,+BAETC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WCNDC,EAAgB,mCAAG,+GAIlBP,EAAS,oBAAqB,IAJZ,uBAGlBQ,EAHkB,EAG1BC,KAAQD,QAHkB,kBAMrBA,GANqB,sCAQtBE,OAAOC,MAAM,+BARS,yDAAH,qDAYhBC,EAAQ,mCAAG,WAAMC,GAAN,kGAIVb,EAAS,gBAAiB,CAClCI,OAAQ,CAAEU,MAAOD,KALC,uBAGVL,EAHU,EAGlBC,KAAQD,QAHU,kBAQbA,GARa,sCAUdE,OAAOC,MAAM,kDAVC,yDAAH,sDAcRI,EAAY,mCAAG,WAAMrB,GAAN,kGAEDM,EAAS,SAAD,OAAUN,GAAM,IAFvB,uBAEhBe,EAFgB,EAEhBA,KAFgB,kBAGjBA,GAHiB,sCAKlBC,OAAOC,MAAM,4CALK,yDAAH,sDASZK,EAAW,mCAAG,WAAMtB,GAAN,kGAEAM,EAAS,SAAD,OAAUN,EAAV,YAAwB,IAFhC,uBAEfe,EAFe,EAEfA,KAFe,kBAGhBA,GAHgB,sCAKjBC,OAAOC,MAAM,wCALI,yDAAH,sDASXM,EAAc,mCAAG,WAAMvB,GAAN,kGAEHM,EAAS,SAAD,OAAUN,EAAV,YAAwB,IAF7B,uBAElBe,EAFkB,EAElBA,KAFkB,kBAGnBA,GAHmB,sCAKpBC,OAAOC,MAAM,uBALO,yDAAH,uD,sKCxCZ,SAASO,IACtB,OAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMZ,EAAQW,EAAaE,IAAI,SA6B/B,OAlBAC,EAAAA,EAAAA,YAAU,WAAM,wCAKd,8GAEuBhB,EAAAA,EAAAA,IAASE,GAFhC,OAEUL,EAFV,OAGIc,EAASd,GAHb,gDAKIoB,QAAQlB,MAAR,MALJ,0DALc,sBACTG,KADS,mCAadgB,GACAT,EAAe,IACfE,EAAS,OACR,CAACT,KAGF,UAAC,IAAD,YACE,0BACE,kBAAMiB,SA1BS,SAAAC,GACnBA,EAAEC,iBACFP,EAAgB,CAAEZ,MAAOM,EAAYc,cAAcC,UAwB/C,WACE,kBACEC,KAAK,OACLvB,KAAK,cACLwB,MAAOjB,EACPkB,SAnCgB,SAAAN,GACxBX,EAAeW,EAAEO,cAAcF,WAoCzB,mBAAQD,KAAK,SAAb,yBAGHd,IAAS,SAAC,IAAD,CAAWhC,OAAQgC","sources":["webpack://react-homework-template/./src/components/Container/Container.module.css?9f71","components/Container/Container.jsx","components/Movie/MovieList.jsx","services/settings.js","services/API.js","views/Movies/MoviesView.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"Container_Container__dPyVg\"};","import s from './Container.module.css';\n\nexport default function Container({ children }) {\n  return <div className={s.Container}>{children}</div>;\n}\n","import { Link, useLocation } from 'react-router-dom';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <ul>\n        {movies &&\n          movies.map(({ id, title, original_name }) => (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {title || original_name}\n              </Link>\n            </li>\n          ))}\n      </ul>\n    </>\n  );\n};\nexport default MovieList;\n","import axios from 'axios';\n\nexport const axiosGet = axios.create({\n  url: '',\n  baseURL: 'https://api.themoviedb.org/3',\n\n  params: {\n    api_key: '8aee03cb2478db5e76cfede337c072a1',\n    language: 'en-US',\n  },\n});\n","import { axiosGet } from './settings';\n\nexport const getTrendingMovie = async () => {\n  try {\n    const {\n      data: { results },\n    } = await axiosGet('/trending/all/day', {});\n\n    return results;\n  } catch (error) {\n    throw Object.error('There is no tranding movies');\n  }\n};\n\nexport const getMovie = async name => {\n  try {\n    const {\n      data: { results },\n    } = await axiosGet('/search/movie', {\n      params: { query: name },\n    });\n\n    return results;\n  } catch (error) {\n    throw Object.error('There is no information about the movie yet...');\n  }\n};\n\nexport const getMovieInfo = async id => {\n  try {\n    const { data } = await axiosGet(`movie/${id}`, {});\n    return data;\n  } catch (error) {\n    throw Object.error('There is no information about this movie');\n  }\n};\n\nexport const getCastInfo = async id => {\n  try {\n    const { data } = await axiosGet(`movie/${id}/credits`, {});\n    return data;\n  } catch (error) {\n    throw Object.error('There is no information about actors');\n  }\n};\n\nexport const getReviewsInfo = async id => {\n  try {\n    const { data } = await axiosGet(`movie/${id}/reviews`, {});\n    return data;\n  } catch (error) {\n    throw Object.error('There is no reviews');\n  }\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovie } from '../../services/API';\nimport MovieList from '../../components/Movie/MovieList';\nimport Container from 'components/Container/Container';\n\nexport default function MoviesPage() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [movie, setMovie] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  const handleSearchQuery = e => {\n    setSearchQuery(e.currentTarget.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSearchParams({ query: searchQuery.toLowerCase().trim() });\n  };\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    async function movieSearch() {\n      try {\n        const data = await getMovie(query);\n        setMovie(data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    movieSearch();\n    setSearchQuery('');\n    setMovie('');\n  }, [query]);\n\n  return (\n    <Container>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"searchQuery\"\n            value={searchQuery}\n            onChange={handleSearchQuery}\n          />\n          <button type=\"submit\">Search</button>\n        </form>\n      </div>\n      {movie && <MovieList movies={movie} />}\n    </Container>\n  );\n}\n"],"names":["Container","children","className","s","movies","location","useLocation","map","id","title","original_name","to","state","from","axiosGet","axios","url","baseURL","params","api_key","language","getTrendingMovie","results","data","Object","error","getMovie","name","query","getMovieInfo","getCastInfo","getReviewsInfo","MoviesPage","useState","searchQuery","setSearchQuery","movie","setMovie","useSearchParams","searchParams","setSearchParams","get","useEffect","console","movieSearch","onSubmit","e","preventDefault","toLowerCase","trim","type","value","onChange","currentTarget"],"sourceRoot":""}